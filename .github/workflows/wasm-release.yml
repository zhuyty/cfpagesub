name: WASM Release

# This workflow requires a personal access token with workflows permission
# Please create a PAT with 'workflow' scope permissions and add it as a secret named PAT_TOKEN

on:
  push:
    tags:
      - 'v*-attempt*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (without v prefix)'
        required: true
        type: string
  repository_dispatch:
    types: [trigger-wasm-release]

jobs:
  wasm_release:
    name: Release WASM Package
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Set version from input, tag or dispatch
        id: set-version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          elif [[ "${{ github.event_name }}" == "repository_dispatch" && "${{ github.event.action }}" == "trigger-wasm-release" ]]; then
            VERSION="${{ github.event.client_payload.version }}"
          else
            TAG_NAME="${GITHUB_REF#refs/tags/}"
            BASE_VERSION=$(echo $TAG_NAME | sed -E 's/v([0-9]+\.[0-9]+\.[0-9]+)(-[a-zA-Z0-9\.]+)?-attempt[0-9]+?/\1\2/')
            VERSION="$BASE_VERSION"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Final version for release: $VERSION"

      - name: Update version in Cargo.toml
        run: |
          CURRENT_VERSION=$(grep -m 1 "version" Cargo.toml | sed 's/.*"\(.*\)".*/\1/')
          VERSION="${{ steps.set-version.outputs.version }}"
          
          if [ "$CURRENT_VERSION" != "$VERSION" ]; then
            echo "Updating version in Cargo.toml from $CURRENT_VERSION to $VERSION"
            sed -i "s/^version = \"$CURRENT_VERSION\"/version = \"$VERSION\"/" Cargo.toml
          else
            echo "Version in Cargo.toml already matches $VERSION"
          fi

      - name: Build WASM package
        run: |
          wasm-pack build --release --target nodejs
          echo "WASM build complete!"

      - name: Update package.json in pkg directory
        run: |
          VERSION="${{ steps.set-version.outputs.version }}"
          jq '.files += ["snippets/"]' pkg/package.json | \
            jq '.dependencies = {"@vercel/kv": "^3.0.0"}' | \
            jq '.name = "subconverter-wasm"' | \
            jq '.dependencies["@vercel/kv"] = "^3.0.0"' | \
            jq '.dependencies["@netlify/blobs"] = "^8.1.2"' | \
            jq ".version = \"$VERSION\"" > tmp.json && mv tmp.json pkg/package.json

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies in pkg directory
        run: |
          cd pkg
          npm install
          cd ..

      - name: Publish to npm
        run: |
          cd pkg
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        continue-on-error: true

      - name: Update version in www project
        if: hashFiles('www/package.json') != ''
        run: |
          VERSION="${{ steps.set-version.outputs.version }}"
          if [ -d "www" ] && [ -f "www/package.json" ]; then
            echo "Updating version in www/package.json to $VERSION..."
            cd www
            jq ".dependencies[\"subconverter-wasm\"] = \"$VERSION\"" package.json > tmp.json && mv tmp.json package.json
            npm install -g pnpm
            # pnpm install --no-frozen-lockfile
            # Add retry logic for pnpm install
            MAX_RETRIES=5
            RETRY_DELAY=5 # seconds
            RETRY_COUNT=0

            echo "Running pnpm install in www (will retry up to $MAX_RETRIES times)..."
            until pnpm install --no-frozen-lockfile; do
                RETRY_COUNT=$((RETRY_COUNT + 1))
                if [ $RETRY_COUNT -ge $MAX_RETRIES ]; then
                    echo "Error: pnpm install failed after $MAX_RETRIES attempts."
                    # Optionally fail the workflow step:
                    # exit 1
                    break # Or exit 1 to fail the step
                fi
                echo "pnpm install failed. Retrying in $RETRY_DELAY seconds (attempt $((RETRY_COUNT + 1))/$MAX_RETRIES)..."
                sleep $RETRY_DELAY
            done
            # Check if pnpm install ultimately succeeded
            if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
              echo "pnpm install successful."
            else
              echo "pnpm install failed after retries. Continuing workflow..." # Or exit 1 if failure should stop the workflow
            fi
            cd ..
          else
            echo "www/package.json not found, skipping update"
          fi

      - name: Commit and push package.json changes
        if: hashFiles('www/package.json') != ''
        uses: EndBug/add-and-commit@v9
        with:
          add: 'www/package.json www/pnpm-lock.yaml'
          message: "Update subconverter-wasm dependency to ${{ steps.set-version.outputs.version }}"
          default_author: github_actions
          push: true
          new_branch: main

      - name: Publish to crates.io
        run: |
          cargo publish --allow-dirty --registry crates-io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        continue-on-error: true

      - name: Create release tag
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          custom_tag: ${{ steps.set-version.outputs.version }}

      - name: Trigger release workflow
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.PAT_TOKEN }}
          event-type: trigger-native-release
          client-payload: '{"version": "${{ steps.set-version.outputs.version }}"}'